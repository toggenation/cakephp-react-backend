{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","state","method","fetch","this","baseurl","mode","credentials","headers","then","response","ok","json","Error","status","statusText","catch","e","console","log","sendFetch","data","setState","articles","className","style","margin","map","item","id","key","cursor","onClick","result","title","body","onSubmit","preventDefault","cache","JSON","stringify","user_id","target","elements","value","reset","htmlFor","name","type","Component","withCookies","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","root","document","getElementById","baseUrl","getAttribute","ReactDOM","render","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.39018d18.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport qs from 'qs';\nimport { withCookies, Cookies } from 'react-cookie';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n\n  }\n\n\n  sendFetch(method = 'GET', options = {}) {\n    return fetch(this.props.baseurl,\n      {\n        method: method,\n        mode: 'cors',\n        credentials: \"include\",\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest',\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then((response) => {\n        if (response.ok) {\n          return response.json()\n        }\n        throw new Error(response.status + \" james has an error \" + response.statusText)\n      }).catch((e) => {\n        console.log(e)\n      })\n  }\n\n  componentWillMount() {\n    this.sendFetch().then((data) => {\n      console.log('STATE', this.state)\n      this.setState({\n        ...this.state,\n        ...data\n      })\n      console.log(this.state)\n    })\n  }\n  render() {\n\n    const { articles } = this.state\n\n    return (\n      <div className=\"App\" style={{ margin: '0px 200px' }}>\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Embedded React Test</h1>\n        </header>\n        <h4>data from cakephp</h4>\n        {articles &&\n          <dl>\n            {articles.map((item) => {\n\n              const id = item.id\n              return <div key={id + 'div'}>\n                <dt\n                  style={{ cursor: 'pointer' }}\n                  onClick={() => {\n                    fetch(this.props.baseurl + '/' + id,\n                      {\n                        method: 'DELETE',\n                        mode: 'cors',\n                        credentials: \"include\",\n                        headers: {\n                          'X-Requested-With': 'XMLHttpRequest',\n                          'Accept': 'application/json',\n                          'Content-Type': 'application/json'\n                        }\n                      }).then((response) => {\n                        if (response.ok) {\n                          return response.json()\n                        }\n                        throw new Error(response.status + \" james has an error \" + response.statusText)\n                      })\n                      .then((result) => {\n                        this.sendFetch().then((data) => {\n                          console.log('STATE', this.state)\n                          this.setState({\n                            ...this.state,\n                            ...data\n                          })\n                          console.log(this.state)\n                        })\n\n                        console.log(result)\n                      })\n                      .catch((e) => {\n                        console.log(e)\n                      })\n\n                  }}\n                  key={id}>{item.title}</dt>\n                <dd key={id + 'dd'}>{item.body}</dd></div>\n            })}\n          </dl>}\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            fetch(this.props.baseurl,\n              {\n                mode: 'cors',\n                method: 'POST',\n                cache: 'no-cache',\n                credentials: \"include\",\n                headers: {\n                  'X-Requested-With': 'XMLHttpRequest',\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  user_id: 1,\n                  title: e.target.elements.title.value,\n                  body: e.target.elements.body.value\n                }),\n              }\n            ).then((response) => {\n              if (response.ok) {\n\n                this.sendFetch().then((data) => {\n                  console.log('STATE', this.state)\n                  this.setState({\n                    ...this.state,\n                    ...data\n                  })\n                  console.log(this.state)\n                })\n                return response.json()\n\n              }\n              throw new Error(response.status + \"HI\" + response.statusText)\n            }).catch((e) => console.log(e))\n\n            console.log(e.target.elements.title.value)\n            console.log(e.target.elements.body.value)\n            e.target.reset();\n\n          }\n          }\n        >\n          <label htmlFor=\"title\">\n            Title <input name=\"title\" />\n          </label>\n          <label htmlFor=\"body\">\n            Body <input name=\"body\" />\n          </label>\n          <button\n            style={{ 'margin-top': '15px'}}\n            type=\"submit\">Submit</button>\n        </form>\n\n\n      </div>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { CookiesProvider } from 'react-cookie';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nconst root = document.getElementById('root');\nconst baseUrl = root.getAttribute('baseurl');\nconsole.log(baseUrl)\nReactDOM.render(\n<CookiesProvider>\n    <App baseurl={baseUrl} />\n</CookiesProvider>, root);\nregisterServiceWorker();\n"],"sourceRoot":""}